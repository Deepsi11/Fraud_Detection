# -*- coding: utf-8 -*-
"""Fraud_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1USWPJx3O3dTgtlrnBjqiFRbuJyhcSOeS

#**IMPORTING THE DEPENDENCIES**
"""

# Commented out IPython magic to ensure Python compatibility.
# IMPORTING THE REQUIRED LIBRARIES
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
# %matplotlib inline

"""#**LOADING THE DATASET**"""

# IMPORTING THE DATASET
fraud = pd.read_csv('/content/Fraud_.csv')

"""#**DATA PRE-PROCESSING**"""

# GETTING THE INSIGHTS OF THE DATA
fraud.head()

# HAVING A LOOK THE BOTTOM OF THE DATASET
fraud.tail(10)

# LET'S CHECK THE SHAPE OF OUR DATASET
fraud.shape

# GETTING A DETAILED OVERVIEW OF OUR DATASET
fraud.info()

# GETTING SOME STATISTICAL MEASURES
fraud.describe()

# LETS FIND THE MISSING VALUES IN OUR DATASET
fraud.isnull().sum()

"""##**HANDLING MISSING VALUES**"""

# SINCE THE MISSING VALUES ARE FEW AS COMPARE TO OUR DATASET,
# LET'S DROP THEM
fraud.dropna(inplace=True)

# RECHECKING THE MISSING VALUES
fraud.isnull().sum()

# CHECKING THE UNIQUE VALUES IN "type" COLUMN
fraud['type'].unique()

# "nameOrig" column values
fraud['nameOrig'].unique()

# "nameDest" column values
fraud['nameDest'].unique()

"""#**LABEL ENCODING**"""

# ENCODING THE VALUES OF "TYPE" COLUMN TO CONVERT CATEGORICAL VALUES INTO NUMERICAL FEATURES
fraud.replace({"type":{'PAYMENT':0,'TRANSFER':1, 'CASH_OUT':2, 'DEBIT':3, 'CASH_IN':4}},inplace=True)

# distribution of the two classes
fraud['isFlaggedFraud'].value_counts()

# distribution of the two classes
fraud['isFraud'].value_counts()

"""0 -------> Legit Transactions

1 -------> Fraudulent Transactions

#**DATA VISUALIZATION**

#**PLOTTONG A PAIR PLOT**
"""

# LETS LOOK AT THE PAIRWISE RELATIONSHIP BETWEEN DIFFERENT VARIABLE OF OUR DATASET
sns.pairplot(fraud)

"""#**VISUALIZING OUTLIERS**

#**BOX PLOT**
"""

# PLOTTING A BOX PLOT, TO HAVE A LOOK AT OUTLIERS
plt.figure(figsize=(15,5))
sns.boxplot(data=fraud, palette='magma')

"""#**MULTI COLLINEARITY**

#**FINDING THE CORRELATIONS**
"""

# CHECKING FOR CORRELATIONS
print(fraud.corr())

"""#**VISUALISING THE CORRELATION THROUGH HEATMAP**

#**HEATMAP**
"""

# VISUALIZING THE HEATMAP TO GET AN IDEA ABOUT THE CORRELATION AMONG FEATURES
correlations = fraud.corr(method='pearson')
plt.figure(figsize = (15,10))
sns.heatmap(correlations,cmap="Blues", annot=True)
plt.show()

"""#**SCATTER PLOT**"""

# Displaying the prediction, whether the transaction is fraud or not through Scatter Plot, considering "oldbalanceOrg" and "newbalanceOrig".
plt.figure(figsize = (8,8))
sns.scatterplot(x = 'oldbalanceOrg', y = 'newbalanceOrig', hue = 'isFraud', palette = 'inferno', data = fraud)

# Displaying the prediction, whether the transaction is fraud or not through Scatter Plot, considering "newbalanceDest" and "newbalanceDest".
plt.figure(figsize = (8,8))
sns.scatterplot(x = 'oldbalanceDest', y = 'newbalanceDest', hue = 'isFraud', palette = 'inferno', data = fraud)

"""#**PLOTTING THE COUNT PLOT**"""

# Outlet_Establishment_Year column
plt.figure(figsize=(6,6))
sns.countplot(x='type', data=fraud, palette='magma')
plt.show()

plt.figure(figsize=(30,6))
sns.countplot(x='step', data=fraud, palette='viridis')
plt.show()

"""#**SEPARATING TARGET AND VARIABLE**"""

# SELECTING THE COLUMNS TO DROP
columns_to_drop = ['isFraud', 'nameOrig', 'nameDest']

# Dropping multiple columns from the DataFrame
X = fraud.drop(columns=columns_to_drop, axis=1)

# Saving the Target Varible to new DataFrame
Y = fraud['isFraud']

"""#**DATA STANDARDIZATION**"""

#This Method Computes the Mean and Standard Deviation of each feature in 'X' and then
# Performs Standardization by Centering and Scaling the features.
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit_transform(X)

standardized_data = X
X = standardized_data
Y = fraud['isFraud']

print(X)
print(Y)

# Splitting the Dataset into Training and Testing Dataset
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""#**MODEL BUILDING**

#**DECISION TREE**
"""

# Taining the Model
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
model_1 = DecisionTreeClassifier()
model_1.fit(X_train, Y_train)

# Finding the Accuracy score of Training Data
X_train_prediction = model_1.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

# Finding the Accuracy Score of Testing Data
X_test_prediction = model_1.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# Printing the Confusion Matrix, Classification Report, and Accuray Score
print('Matrix', confusion_matrix(Y_test, X_test_prediction))
print('f1', classification_report(Y_test, X_test_prediction))
print('Accuracy', accuracy_score(Y_test, X_test_prediction))

# Printing the Accuracy of Training Data and Test Data.
print('Accuracy on Training Data : ', training_data_accuracy)
print('Accuracy on Test Data : ', test_data_accuracy)

"""#**ARTIFICIAL NEURAL NETWORK**"""

# Training the Model
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
model_2 = MLPClassifier()
model_2.fit(X_train, Y_train)

# Finding the Accuracy score of Training Data
X_train_prediction = model_1.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

# Finding the Accuracy Score of Testing Data

X_test_prediction = model_1.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# Printing the Confusion Matrix, Classification Report, and Accuray Score
print('Matrix', confusion_matrix(Y_test, X_test_prediction))
print('f1', classification_report(Y_test, X_test_prediction))
print('Accuracy', accuracy_score(Y_test, X_test_prediction))

# Printing the Accuracy of Training Data and Test Data.
print('Accuracy on Training Data : ', training_data_accuracy)
print('Accuracy on Test Data : ' , accuracy_score(Y_test, X_test_prediction))

"""#**RANDOM FOREST CLASSIFIER**"""

# Training the Model
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
model_3 = DecisionTreeClassifier()
model_3.fit(X_train, Y_train)

# Finding the Accuracy score of Training Data
X_train_prediction = model_1.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

# Finding the Accuracy Score of Testing Data
X_test_prediction = model_1.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# Printing the Confusion Matrix, Classification Report, and Accuray Score
print('Matrix', confusion_matrix(Y_test, X_test_prediction))
print('f1', classification_report(Y_test, X_test_prediction))
print('Accuracy', accuracy_score(Y_test, X_test_prediction))

# Printing the Accuracy of Training Data and Test Data.
print('Accuracy on Training Data : ', training_data_accuracy)
print('Accuracy on Test Data : ' , accuracy_score(Y_test, X_test_prediction))

"""#**XGBOOST CLASSIFIER**"""

# Training the Model
import xgboost as xgb
from sklearn.metrics import accuracy_score
xgb = xgb.XGBClassifier()
xgb.fit(X_train, Y_train)

# Finding the Accuracy score of Training Data
X_train_prediction = model_1.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

# Finding the Accuracy Score of Testing Data
X_test_prediction = model_1.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# Printing the Confusion Matrix, Classification Report, and Accuray Score
print('Matrix', confusion_matrix(Y_test, X_test_prediction))
print('f1', classification_report(Y_test, X_test_prediction))
print('Accuracy', accuracy_score(Y_test, X_test_prediction))

# Printing the Accuracy of Training Data and Test Data.
print('Accuracy on Training Data : ', training_data_accuracy)
print('Accuracy on Test Data : ' , accuracy_score(Y_test, X_test_prediction))

"""##We Trained our model with various algorithms such as Decision Trees, Artificial Neural Network, Random Forest classifier, XGBoost Classifier, and got same kind of accuracy in each model

##**Training Accuracy --------> 100%**

##**Testing Accuracy ---------> 99%**

#**BUILDING A PREDICTIVE MODEL**
"""

input_data = (1,1,181.0,181.0,0.0,0.0,0.0,0)

# Changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)


# Standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = xgb.predict(std_data)
print(prediction)

if (prediction[0]==0):
    print("Transaction is Fraud")
else:
    print("Transaction is Legit")

"""##**Our System has correctly predicted that the transaction is fraud.**"""